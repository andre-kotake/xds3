#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

xds3_usage() {
  printf "xds3 - Use DualShock 3 as a Xbox 360 joystick with xboxdrv.\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  xds3 COMMAND\n"
  printf "  xds3 [COMMAND] --help | -h\n"
  printf "  xds3 --version | -v\n"
  echo

  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Starts xboxdrv for connected DualShock 3.\n" "$(green "start")"
  printf "  %s   Stops all xboxdrv instances.\n" "$(green "stop") "
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

    printf "%s\n" "$(bold "Examples:")"
    printf "  xds3 start 20\n"
    printf "  xds3 stop\n"
    echo

  fi
}

xds3_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "xds3 start\n\n"
    printf "  Starts xboxdrv for connected DualShock 3.\n  \n  Requires either --event_id or --config.\n\n"
  else
    printf "xds3 start - Starts xboxdrv for connected DualShock 3.\n\n"
  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  xds3 start [OPTIONS]\n"
  printf "  xds3 start --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--event_id, -e EVENT_ID")"
    printf "    The input event ID.\n"
    printf "    %s\n" "Conflicts: --config"
    echo

    printf "  %s\n" "$(magenta "--config, -c CONFIG_FILE")"
    printf "    Use configuration file.\n"
    printf "    %s\n" "Conflicts: --event_id"
    echo

    printf "  %s\n" "$(magenta "--daemon, -d")"
    printf "    Use daemon detached mode.\n"
    echo

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

xds3_stop_usage() {
  printf "xds3 stop - Stops all xboxdrv instances.\n\n"

  printf "%s\n" "$(bold "Usage:")"
  printf "  xds3 stop\n"
  printf "  xds3 stop --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "$(bold "Options:")"

    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

print_in_color() {
	local color="$1"
	shift
	if [[ -z ${NO_COLOR+x} ]]; then
		printf "$color%b\e[0m\n" "$*"
	else
		printf "%b\n" "$*"
	fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

get_battery_level() {
	local event_id="$1"
	local mac_address
	local capacity

	mac_address=$(
		</proc/bus/input/devices awk -v handler="event${event_id}" \
			'/H: Handlers=/{if ($0 ~ handler) print prev} {prev=$0}' |
			awk -F'=' '/U: Uniq=/{print $2}' | tr '[:upper:]' '[:lower:]'
	)
	capacity=$(cat "/sys/class/power_supply/sony_controller_battery_${mac_address}/capacity")

	echo "Battery: $(green "${capacity}%")"
}

kill_current_instance() {
	set +e # dont exit on error

	if [[ -n "$(pgrep xboxdrv)" ]]; then
		echo "Stopping current instance of $(blue "xboxdrv")..."
		killall xboxdrv --wait
		echo "Stopped $(blue "xboxdrv")"
		echo
	fi

	set -e # exit on error again
}

validate_file_exists() {
  [[ -z "$1" ]] && echo "must not be empty"
  [[ -f "$1" ]] || echo "must be an existing file"
}

validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

xds3_start_command() {
  # shellcheck disable=SC2154

  # Args
  event_id=${args[--event_id]:=0}
  config_file=${args[--config]:=""}
  daemon=${args[--daemon]:=0}

  if [[ "$event_id" -eq 0 && -z "$config_file" ]]; then
    red_bold "The \"start\" command requires --event_id or --config."

    # shellcheck disable=SC2034
    long_usage=yes
    xds3_start_usage

    exit 1
  fi

  # Kill the current running xboxdrv
  kill_current_instance

  command=()

  # Build the xboxdrv command as an array
  if [[ $event_id -gt 0 ]]; then
    green "Starting xboxdrv for: $(blue /dev/input/event"$event_id")"
    get_battery_level "$event_id"

    command=(
      "--evdev" "/dev/input/event${event_id}"
      "--evdev-keymap" "BTN_START=Start,BTN_MODE=Guide,BTN_SELECT=Back,BTN_SOUTH=A,BTN_EAST=B,BTN_WEST=X,BTN_NORTH=Y,BTN_TL=LB,BTN_TR=RB,BTN_TL2=LT,BTN_TR2=RT,BTN_THUMBL=TL,BTN_THUMBR=TR,BTN_DPAD_UP=DU,BTN_DPAD_DOWN=DD,BTN_DPAD_LEFT=DL,BTN_DPAD_RIGHT=DR"
      "--evdev-absmap" "ABS_X=X1,ABS_Y=Y1,ABS_RX=X2,ABS_RY=Y2,ABS_Z=LT,ABS_RZ=RT"
      "--axismap" "-Y1=Y1,-Y2=Y2"
      "--calibration" "RT=0:127:255,LT=0:127:255"
      "--mimic-xpad"
      "--detach-kernel-driver"
      "--quiet"
      "--silent"
    )
  fi

  # Use the configuration file
  if [[ -n "$config_file" ]]; then
    green "Starting xboxdrv with configuration: $(blue "$config_file")"
    command=("--config" "$config_file")
  fi

  # Add --daemon and --detach conditionally
  if [[ $daemon -eq 1 ]]; then
    command+=("--daemon")
    command+=("--detach")
  else
    echo "Press Ctrl-C to quit."
  fi

  xboxdrv "${command[@]}"

}

xds3_stop_command() {
  kill_current_instance

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        xds3_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    start)
      action="start"
      shift
      xds3_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      xds3_stop_parse_requirements "$@"
      shift $#
      ;;

    "")
      xds3_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

xds3_start_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        xds3_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="start"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --event_id | -e)

        if [[ -n "${args['--config']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--config" >&2
          exit 1
        fi

        if [[ -n ${2+x} ]]; then
          args['--event_id']="$2"
          shift
          shift
        else
          printf "%s\n" "--event_id requires an argument: --event_id, -e EVENT_ID" >&2
          exit 1
        fi
        ;;

      --config | -c)

        if [[ -n "${args['--event_id']:-}" ]]; then
          printf "conflicting options: %s cannot be used with %s\n" "$key" "--event_id" >&2
          exit 1
        fi

        if [[ -n ${2+x} ]]; then
          args['--config']="$2"
          shift
          shift
        else
          printf "%s\n" "--config requires an argument: --config, -c CONFIG_FILE" >&2
          exit 1
        fi
        ;;

      --daemon | -d)

        args['--daemon']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  if [[ -v args['--event_id'] && -n $(validate_integer "${args['--event_id']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--event_id, -e EVENT_ID" "$(validate_integer "${args['--event_id']:-}")" >&2
    exit 1
  fi

  if [[ -v args['--config'] && -n $(validate_file_exists "${args['--config']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--config, -c CONFIG_FILE" "$(validate_file_exists "${args['--config']:-}")" >&2
    exit 1
  fi

}

xds3_stop_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        xds3_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="stop"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

initialize() {
  version="1.0.0"
  long_usage=''
  set -euo pipefail

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "start") xds3_start_command ;;
    "stop") xds3_stop_command ;;
  esac
}

initialize
run "$@"
