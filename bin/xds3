#!/usr/bin/env bash
# This script was generated by bashly 1.2.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ ${BASH_VERSINFO:-0} -lt 4 ]]; then
	printf "bash version 4 or higher is required\n" >&2
	exit 1
fi

version_command() {
	echo "$version"
}

xds3_usage() {
	printf "xds3 - Use DualShock 3 as a Xbox 360 joystick.\n\n"

	printf "%s\n" "$(bold "Usage:")"
	printf "  xds3 COMMAND\n"
	printf "  xds3 [COMMAND] --help | -h\n"
	printf "  xds3 --version | -v\n"
	echo

	printf "%s\n" "$(bold "Commands:")"
	printf "  %s   Starts xboxdrv for connected DualShock 3 input event.\n" "$(green "start")"
	printf "  %s   Stops all xboxdrv instances.\n" "$(green "stop") "
	echo

	if [[ -n $long_usage ]]; then
		printf "%s\n" "$(bold "Options:")"

		printf "  %s\n" "$(magenta "--help, -h")"
		printf "    Show this help\n"
		echo
		printf "  %s\n" "$(magenta "--version, -v")"
		printf "    Show version number\n"
		echo

		printf "%s\n" "$(bold "Examples:")"
		printf "  xds3 start 20\n"
		printf "  xds3 stop\n"
		echo

	fi
}

xds3_start_usage() {
	printf "xds3 start - Starts xboxdrv for connected DualShock 3 input event.\n\n"

	printf "%s\n" "$(bold "Usage:")"
	printf "  xds3 start EVENT_ID\n"
	printf "  xds3 start --help | -h\n"
	echo

	if [[ -n $long_usage ]]; then
		printf "%s\n" "$(bold "Options:")"

		printf "  %s\n" "$(magenta "--help, -h")"
		printf "    Show this help\n"
		echo

		printf "%s\n" "$(bold "Arguments:")"

		printf "  %s\n" "$(blue "EVENT_ID")"
		printf "\n"
		echo

	fi
}

xds3_stop_usage() {
	printf "xds3 stop - Stops all xboxdrv instances.\n\n"

	printf "%s\n" "$(bold "Usage:")"
	printf "  xds3 stop\n"
	printf "  xds3 stop --help | -h\n"
	echo

	if [[ -n $long_usage ]]; then
		printf "%s\n" "$(bold "Options:")"

		printf "  %s\n" "$(magenta "--help, -h")"
		printf "    Show this help\n"
		echo

	fi
}

normalize_input() {
	local arg passthru flags
	passthru=false

	while [[ $# -gt 0 ]]; do
		arg="$1"
		if [[ $passthru == true ]]; then
			input+=("$arg")
		elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
			input+=("${BASH_REMATCH[1]}")
			input+=("${BASH_REMATCH[2]}")
		elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
			flags="${BASH_REMATCH[1]}"
			for ((i = 0; i < ${#flags}; i++)); do
				input+=("-${flags:i:1}")
			done
		elif [[ $arg == "--" ]]; then
			passthru=true
			input+=("$arg")
		else
			input+=("$arg")
		fi

		shift
	done
}

print_in_color() {
	local color="$1"
	shift
	if [[ -z ${NO_COLOR+x} ]]; then
		printf "$color%b\e[0m\n" "$*"
	else
		printf "%b\n" "$*"
	fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

xds3_start_command() {
	# shellcheck disable=SC2154
	event_id=${args[event_id]}

	start_xboxdrv() {
		green "Iniciando xboxdrv para /dev/input/event${event_id}"

		xboxdrv \
			--evdev "/dev/input/event${event_id}" \
			--silent \
			--detach-kernel-driver \
			--mimic-xpad \
			--evdev-keymap BTN_START=Start,BTN_MODE=Guide,BTN_SELECT=Back,BTN_SOUTH=A,BTN_EAST=B,BTN_WEST=X,BTN_NORTH=Y,BTN_TL=LB,BTN_TR=RB,BTN_TL2=LT,BTN_TR2=RT,BTN_THUMBL=TL,BTN_THUMBR=TR,BTN_DPAD_UP=DU,BTN_DPAD_DOWN=DD,BTN_DPAD_LEFT=DL,BTN_DPAD_RIGHT=DR \
			--evdev-absmap ABS_X=X1,ABS_Y=Y1,ABS_RX=X2,ABS_RY=Y2,ABS_Z=LT,ABS_RZ=RT \
			--axismap -Y1=Y1,-Y2=Y2 \
			--calibration RT=0:127:255,LT=0:127:255
	}

	start_xboxdrv

}

xds3_stop_command() {
	echo "$(green Parando todas as instÃ¢ncias de xboxdrv)"
	sudo killall xboxdrv

}

parse_requirements() {

	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		--version | -v)
			version_command
			exit
			;;

		--help | -h)
			long_usage=yes
			xds3_usage
			exit
			;;

		*)
			break
			;;

		esac
	done

	action=${1:-}

	case $action in
	-*) ;;

	start)
		action="start"
		shift
		xds3_start_parse_requirements "$@"
		shift $#
		;;

	stop)
		action="stop"
		shift
		xds3_stop_parse_requirements "$@"
		shift $#
		;;

	"")
		xds3_usage >&2
		exit 1
		;;

	*)
		printf "invalid command: %s\n" "$action" >&2
		exit 1
		;;

	esac

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

		-?*)
			printf "invalid option: %s\n" "$key" >&2
			exit 1
			;;

		*)

			printf "invalid argument: %s\n" "$key" >&2
			exit 1

			;;

		esac
	done

}

xds3_start_parse_requirements() {

	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		--help | -h)
			long_usage=yes
			xds3_start_usage
			exit
			;;

		*)
			break
			;;

		esac
	done

	action="start"

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

		-?*)
			printf "invalid option: %s\n" "$key" >&2
			exit 1
			;;

		*)

			if [[ -z ${args['event_id']+x} ]]; then
				args['event_id']=$1
				shift
			else
				printf "invalid argument: %s\n" "$key" >&2
				exit 1
			fi

			;;

		esac
	done

	if [[ -z ${args['event_id']+x} ]]; then
		printf "missing required argument: EVENT_ID\nusage: xds3 start EVENT_ID\n" >&2

		exit 1
	fi

}

xds3_stop_parse_requirements() {

	while [[ $# -gt 0 ]]; do
		case "${1:-}" in
		--help | -h)
			long_usage=yes
			xds3_stop_usage
			exit
			;;

		*)
			break
			;;

		esac
	done

	action="stop"

	while [[ $# -gt 0 ]]; do
		key="$1"
		case "$key" in

		-?*)
			printf "invalid option: %s\n" "$key" >&2
			exit 1
			;;

		*)

			printf "invalid argument: %s\n" "$key" >&2
			exit 1

			;;

		esac
	done

}

initialize() {
	version="1.0.0"
	long_usage=''
	set -euo pipefail

}

run() {
	declare -A args=()
	declare -A deps=()
	declare -a other_args=()
	declare -a env_var_names=()
	declare -a input=()
	normalize_input "$@"
	parse_requirements "${input[@]}"

	case "$action" in
	"start") xds3_start_command ;;
	"stop") xds3_stop_command ;;
	esac
}

initialize
run "$@"
